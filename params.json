{"name":"assure","tagline":"Promises/A+ micro library to help with asynchronous work flow.","body":"# assure\r\n\r\nPromises/A+ micro library to help with asynchronous work flow. The deferred methods match jQuery's when possible for convenience and familiarity, but under the hood it is a Promises/A+ spec!\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.done(function (arg) {\r\n\tconsole.log(\"Outcome: \" + arg);\r\n});\r\n\r\ndeferred.always(function (arg) {\r\n\t...\r\n});\r\n```\r\n\r\n## What is Supported?\r\n\r\n* AMD loaders (require.js, cujo.js, etc.)\r\n* node.js (npm install assure)\r\n* script tag\r\n\r\n## How do I use this?\r\n\r\nPromises (deferreds/futures/etc.) are a way to create a tangible connection between `now` and an eventual outcome. Promises are a good pattern for asynchronous I/O, such as API interaction, AJAX operations, etc., by providing optional `success` & `failure` handling.\r\n\r\nPromise reconciliation is asynchronous, allowing you to chain multiple Promises together in a hierarchy, for resolution. If a `Promise` returns a new `Promise` from a handler, you've effectively branched during reconciliation, like a T, which puts the \"parent\" of the new `Promise` into a pending state, which can only be reconciled from the branch.\r\n\r\nA `then()` will return a ***new*** Promise which is in a hierarchal relationship. When a \"parent\" is reconciled, it's \"children\" inherit the outcome. Promise chains can be resolved from either end.\r\n\r\n## API\r\n\r\n### always\r\n#### Method\r\n\r\nRegisters a function to execute after Promise is reconciled\r\n\r\n\tparam  {Function} arg Function to execute\r\n\treturn {Object}       Deferred\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.always(function() {\r\n\tconsole.log(\"This is always going to run\");\r\n});\r\n```\r\n\r\n### done\r\n#### Method\r\n\r\nRegisters a function to execute after Promise is resolved\r\n\r\n\tparam  {Function} arg Function to execute\r\n\treturn {Object}       Deferred\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.done(function() {\r\n\tconsole.log(\"This is going to run if Promise is resolved\");\r\n});\r\n```\r\n\r\n### fail\r\n#### Method\r\n\r\nRegisters a function to execute after Promise is rejected\r\n\r\n\tparam  {Function} arg Function to execute\r\n\treturn {Object}       Deferred\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.fail(function() {\r\n\tconsole.log(\"This is going to run if Promise is rejected\");\r\n});\r\n```\r\n\r\n### isRejected\r\n#### Method\r\n\r\nDetermines if Deferred is rejected\r\n\r\n\treturn {Boolean} `true` if rejected\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.isRejected(); // false, it's brand new!\r\n```\r\n\r\n### isResolved\r\n#### Method\r\n\r\nDetermines if Deferred is resolved\r\n\r\n\treturn {Boolean} `true` if resolved\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.isResolved(); // false, it's brand new!\r\n```\r\n\r\n### reject\r\n#### Method\r\nBreaks a Promise\r\n\r\n\tparam  {Mixed} arg Promise outcome\r\n\treturn {Object}    Promise\r\n\r\n***Example***\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.then(null, function (e) {\r\n\tconsole.error(e);\r\n});\r\n\r\ndeferred.reject(\"rejected\");\r\n```\r\n\r\n### resolve\r\n#### Method\r\nPromise is resolved\r\n\r\n\tparam  {Mixed} arg Promise outcome\r\n\treturn {Object}    Promise\r\n\r\n***Example***\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.then(function (arg) {\r\n\tconsole.log(arg);\r\n});\r\n\r\ndeferred.resolve(\"resolved\");\r\n```\r\n\r\n### state\r\n#### Method\r\n\r\nGets the state of the Promise\r\n\r\n\treturn {String} Describes the state\r\n\r\n**Example**\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.state(); // `pending`\r\n```\r\n\r\n### then\r\n#### Method\r\nRegisters handler(s) for a Promise\r\n\r\n\tparam  {Function} success Executed when/if promise is resolved\r\n\tparam  {Function} failure [Optional] Executed when/if promise is broken\r\n\treturn {Object}           New Promise instance\r\n\r\n***Example***\r\n\r\n```\r\nvar deferred = assure();\r\n\r\ndeferred.then(function (arg) {\r\n\tconsole.log(\"Promise succeeded!\");\r\n}, function (e) {\r\n\tconsole.error(\"Promise failed!\");\r\n});\r\n\r\ndeferred.resolve(\"resolved\");\r\n```\r\n\r\n### when\r\n#### Method\r\nAccepts Deferreds or Promises as arguments or an Array\r\n\r\n\treturn {Object} Deferred\r\n\r\n***Example***\r\n\r\n```\r\nvar d1 = assure(),\r\n    d2 = assure(),\r\n    d3 = assure();\r\n\r\n...\r\n\r\nwhen(d1,d2,d3).then(function (values) {\r\n\t...\r\n});\r\n```\r\n\r\n## License\r\nCopyright (c) 2013 Jason Mulligan  \r\nLicensed under the BSD-3 license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}