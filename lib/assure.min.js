/*
 2013 Jason Mulligan
 @license BSD-3 <https://raw.github.com/avoidwork/assure/master/LICENSE>
 @link http://avoidwork.github.io/assure/
 @module assure
 @version 1.0.2
*/
(function(n){function f(){var a=this;this.promise=e.factory();this.onDone=[];this.onAlways=[];this.onFail=[];this.promise.then(function(b){m(function(){h(a.onDone,function(a){a(b)});h(a.onAlways,function(a){a(b)});a.onAlways=[];a.onDone=[];a.onFail=[]})},function(b){m(function(){h(a.onFail,function(a){a(b)});h(a.onAlways,function(a){a(b)});a.onAlways=[];a.onDone=[];a.onFail=[]})})}function g(){this.deferred=!1;this.handlers=[];this.state=e.state.PENDING;this.value=null}var l=function(){return new f};
l.when=function(){var a=0,b=l(),c=[].slice.call(arguments),d;c[0]instanceof Array&&(c=c[0]);d=c.length;0===d?b.resolve(null):h(c,function(e){e.then(function(){++a!==d||b.isResolved()||(1<c.length?b.resolve(c.map(function(a){return a.value||a.promise.value})):b.resolve(c[0].value||c[0].promise.value))},function(){b.isResolved()||(1<c.length?b.reject(c.map(function(a){return a.value||a.promise.value})):b.reject(c[0].value||c[0].promise.value))})});return b};f.prototype.constructor=f;f.prototype.always=
function(a){if("function"!==typeof a)throw Error(k.invalidArguments);if(this.isResolved())throw Error(k.promiseResolved.replace("{{outcome}}",this.promise.outcome));this.onAlways.push(a);return this};f.prototype.done=function(a){if("function"!==typeof a)throw Error(k.invalidArguments);if(this.isResolved())throw Error(k.promiseResolved.replace("{{outcome}}",this.promise.outcome));this.onDone.push(a);return this};f.prototype.fail=function(a){if("function"!==typeof a)throw Error(k.invalidArguments);
if(this.isRejected())throw Error(k.promiseResolved.replace("{{outcome}}",this.promise.outcome));this.onFail.push(a);return this};f.prototype.isRejected=function(){return this.promise.state===e.state.FAILURE};f.prototype.isResolved=function(){return this.promise.state===e.state.SUCCESS};f.prototype.reject=function(a){this.promise.reject.call(this.promise,a);return this};f.prototype.resolve=function(a){this.promise.resolve.call(this.promise,a);return this};f.prototype.state=function(){return this.promise.state};
f.prototype.then=function(a,b){return this.promise.then(a,b)};var m=function(){return"undefined"!==typeof setImmediate?setImmediate:"undefined"!==typeof process?process.nextTick:function(a){setTimeout(a,0)}}(),h=function(a,b){var c=a.length,d;for(d=0;d<c&&!1!==b.call(a,a[d],d);d++);return a},k={invalidArguments:"Invalid arguments",promiseResolved:"The promise has been resolved: {{outcome}}"},e={delay:function(){return"undefined"!==typeof setImmediate?setImmediate:"undefined"!==typeof process?process.nextTick:
function(a){setTimeout(a,0)}}(),factory:function(){return new g},pipe:function(a,b){a.then(function(a){b.resolve(a)},function(a){b.reject(a)})},state:{PENDING:0,FAILURE:1,SUCCESS:2}};g.prototype.constructor=g;g.prototype.process=function(){var a,b,c;this.deferred=!1;if(this.state!==e.state.PENDING)return c=this.value,b=this.state===e.state.SUCCESS,h(this.handlers.slice(),function(d){var f=d[b?"success":"failure"];d=d.promise;if(f&&"function"===typeof f){try{a=f(c)}catch(g){d.reject(g);return}a&&"function"===
typeof a.then?e.pipe(a,e):d.resolve(a)}else c&&"function"===typeof c.then?e.pipe(c,d):b?d.resolve(c):d.reject(c)}),this};g.prototype.reject=function(a){var b=this;if(!(this.state>e.state.PENDING))return this.value=a,this.state=e.state.FAILURE,this.deferred||(e.delay(function(){b.process()}),this.deferred=!0),this};g.prototype.resolve=function(a){var b=this;if(!(this.state>e.state.PENDING))return this.value=a,this.state=e.state.SUCCESS,this.deferred||(e.delay(function(){b.process()}),this.deferred=
!0),this};g.prototype.then=function(a,b){var c=this,d=new g;this.handlers.push({success:a,failure:b,promise:d});this.state>e.state.PENDING&&!this.deferred&&(e.delay(function(){c.process()}),this.deferred=!0);return d};"undefined"!==typeof exports?module.exports=l:"function"===typeof define?define(function(){return l}):n.assure=l})(this);
//@ sourceMappingURL=assure.map
